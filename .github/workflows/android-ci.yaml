name: Android CI [ an ]

on:
  push:
    branches: 
      - "an"
      - "an-user-test"
  pull_request:
    branches: 
      - "an"
      - "an-user-test"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Android Build & Verify
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./android/TodokTodok

    permissions:
      contents: read
      pull-requests: write
      issues: write

    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      BASE_URL: ${{ secrets.BASE_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Restore Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "base_url=$BASE_URL" >> local.properties

      - name: Create google-services.json
        run: echo "$GOOGLE_SERVICES_JSON" > ./app/google-services.json

      - name: Run ktlint Check
        id: ktlint
        run: |
          start=$(date +%s)
          ./gradlew ktlintCheck --build-cache --parallel
          end=$(date +%s)
          echo "time=$((end-start))" >> $GITHUB_OUTPUT

      - name: Run Unit Tests
        id: test
        run: |
          start=$(date +%s)
          ./gradlew testDebugUnitTest --build-cache --parallel
          end=$(date +%s)
          echo "time=$((end-start))" >> $GITHUB_OUTPUT

      - name: Assemble Debug APK
        id: assemble
        run: |
          start=$(date +%s)
          ./gradlew assembleDebug --build-cache --parallel
          end=$(date +%s)
          echo "time=$((end-start))" >> $GITHUB_OUTPUT

      - name: Post CI summary as PR comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              ktlint: {
                status: '${{ steps.ktlint.outcome }}',
                name: 'Ktlint Check',
                time: '${{ steps.ktlint.outputs.time }}'
              },
              test: {
                status: '${{ steps.test.outcome }}',
                name: 'Unit Tests',
                time: '${{ steps.test.outputs.time }}'
              },
              assemble: {
                status: '${{ steps.assemble.outcome }}',
                name: 'Assemble Debug APK',
                time: '${{ steps.assemble.outputs.time }}'
              }
            };
            
            const emoji = {
              success: '✅',
              failure: '❌',
              cancelled: '⚠️',
              skipped: '⏭️'
            };
            
            const runUrl = `https://github.com/${process.env.GITHUB_REPOSITORY}/runs/${process.env.GITHUB_RUN_ID}`;
            
            function formatTime(seconds) {
              seconds = parseInt(seconds || 0, 10);
              if (seconds >= 60) {
                const min = Math.floor(seconds / 60);
                const sec = seconds % 60;
                return `${min}m ${sec}s`;
              }
              return `${seconds}s`;
            }
            
            const totalTime = Object.values(results)
              .reduce((acc, step) => acc + parseInt(step.time || 0), 0);
            
            let body = `## 🧩 Android CI 요약\n\n**단계별 결과:**\n`;
            
            for (const step of Object.values(results)) {
              const statusEmoji = emoji[step.status] || '❔';
              const statusText = step.status === 'success' ? '성공' : '실패';
              body += `- **${step.name}**: ${statusEmoji} ${statusText} (${formatTime(step.time)})\n`;
            }
            
            body += `\n**총 소요 시간:** **${formatTime(totalTime)}**\n`;
            
            const failedSteps = Object.values(results)
              .filter(step => step.status !== 'success')
              .map(step => step.name);
            
            if (failedSteps.length > 0) {
              body += `\n⚠️ **주의:** 실패한 단계: **${failedSteps.join(', ')}**\n`;
              body += `자세한 로그는 [Actions 실행 로그](${runUrl})에서 확인하세요.\n`;
            } else {
              body += `\n🎉 SUCCESS !🎉`;
            }
            
            if (context.eventName === 'pull_request') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'COMMENT',
                body
              });
            }
