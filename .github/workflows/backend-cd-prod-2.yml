name: Backend CD Prod 2
on:
  workflow_call

jobs:
  find_previous_image_version:
    runs-on: [self-hosted, prod-2]

    outputs:
      previousImageVersion: ${{steps.find_version.outputs.name}}

    steps:
      - id: find_version
        run: |
          PREVIOUS_IMAGE_NAME=$(docker ps -f "name=prod_*" --format "{{.Image}}" | head -n 1)
          echo "name=$PREVIOUS_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo $PREVIOUS_IMAGE_NAME

  cd:
    runs-on: [self-hosted, prod-2]

    defaults:
      run:
        shell: bash
        working-directory: ./backend

    steps:
      - name: Fix permissions
        run: |
          pwd
          ls -l
          sudo chown -R ubuntu:ubuntu promtail_data
          sudo chown -R ubuntu:ubuntu log

      - name: Cleanup backend log and promtail data directory before checkout
        run: |
          sudo rm -rf backend/promtail_data || true
          sudo rm -rf backend/log || true

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SECRETS_SUBMODULE_ACCESS_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      - name: Stop running Container (Gracefully)
        run: |
          echo "=== Stopping containers ==="

          echo "1. Gracefully stopping application..."
          docker stop -t 35 $(docker ps -q --filter "name=prod_") || true

          echo "2. Stopping promtail..."
          docker stop $(docker ps -q --filter "name=promtail_prod_") || true

          echo "3. Waiting for ALB to detect unhealthy status..."
          sleep 25

          echo "=== Ready for new containers ==="

      - name: Docker Compose Pull & Up (no-build)
        env:
          ENV_ID: ${{ github.sha }}
          BACKEND_APP_IMAGE_NAME: woowajeff/todoktodok:prod-${{ github.sha }}
        run: |
          echo "ENV_ID: $ENV_ID"
          docker compose -f config/docker-compose-prod.yml pull
          docker compose -f config/docker-compose-prod.yml up -d --no-build
          echo "docker compose-prod up"

      - name: Docker image Prune
        run: |
          echo "24시간 이상 사용되지 않은 Docker 이미지 정리 중..."
          sudo docker image prune -f --filter "until=24h"
          echo "이미지 정리 완료"

  health_check_prod_2:
    runs-on: [self-hosted, prod-2]

    defaults:
      run:
        shell: bash
        working-directory: ./backend

    needs: cd

    steps:
      - name: Send Health Check Request
        run: |
          sleep 15
          
          for i in {1..10}; do
            response=$(curl -s http://localhost:8080/management/health_check/readiness)
            echo "Attempt $i: Response Body: $response"
          
            if [[ "$response" == *"\"status\":\"UP\""* ]]; then
              echo "Health check passed. Application is ready."
              exit 0
            fi
          
            if [ "$i" -eq 10 ]; then
              echo "Health check failed after 10 attempts."
              exit 1
            fi
          
            echo "Waiting 5 seconds..."
            sleep 5
          done

  roll-back_prod_2:
    runs-on: [self-hosted, prod-2]

    defaults:
      run:
        shell: bash
        working-directory: ./backend

    needs: [health_check_prod_2, find_previous_image_version]
    if: failure()

    steps:
      - name: Fix permissions
        run: |
          pwd
          ls -l
          sudo chown -R ubuntu:ubuntu promtail_data
          sudo chown -R ubuntu:ubuntu log

      - name: Cleanup backend log and promtail data directory before checkout
        run: |
          sudo rm -rf backend/promtail_data || true
          sudo rm -rf backend/log || true

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SECRETS_SUBMODULE_ACCESS_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_DEPLOY_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}

      - name: Stop running Container (Gracefully)
        run: |
          echo "=== Stopping containers ==="

          echo "1. Gracefully stopping application..."
          docker stop -t 35 $(docker ps -q --filter "name=prod_") || true

          echo "2. Stopping promtail..."
          docker stop $(docker ps -q --filter "name=promtail_prod_") || true

          echo "3. Waiting for ALB to detect unhealthy status..."
          sleep 25

          echo "=== Ready for new containers ==="

      - name: Docker Compose Pull & Up (no-build)
        env:
          ENV_ID: ${{ github.sha }}
          BACKEND_APP_IMAGE_NAME: ${{ needs.find_previous_image_version.outputs.previousImageVersion }}
        run: |
          echo "ENV_ID: $ENV_ID"
          docker compose -f config/docker-compose-prod.yml pull
          docker compose -f config/docker-compose-prod.yml up -d --no-build
          echo "docker compose-prod up"

  health_check_2_after_roll-back:
    runs-on: [self-hosted, prod-2]
    defaults:
      run:
        shell: bash
        working-directory: ./backend

    needs: roll-back_prod_2
    if: ${{always() && needs.roll-back_prod_2.result != 'skipped'}}

    steps:
      - name: Send Health Check Request
        run: |
          sleep 15
          
          for i in {1..10}; do
            response=$(curl -s http://localhost:8080/management/health_check/readiness)
            echo "Attempt $i: Response Body: $response"
          
            if [[ "$response" == *"\"status\":\"UP\""* ]]; then
              echo "Health check passed. Application is ready."
              exit 0
            fi
          
            if [ "$i" -eq 10 ]; then
              echo "Health check failed after 10 attempts."
              exit 1
            fi
          
            echo "Waiting 5 seconds..."
            sleep 5
          done
