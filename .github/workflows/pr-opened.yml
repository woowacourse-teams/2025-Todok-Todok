name: PR Opened

on:
  pull_request:
    types:
      - opened

jobs:
  setup_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
      repository-projects: write

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set PR assignees
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;
            
            await github.rest.issues.addAssignees({
              owner: repository.owner.login,
              repo: repository.name,
              issue_number: pr.number,
              assignees: [author],
            });

      - name: Set reviewers
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const author = pr.user.login;
            
            const be = ['horizonpioneer', 'sonjh919', 'Chaeyoung714', 'ljhee92'];
            const an = ['chanho0908', 'wondroid-world', 'donghyun81'];
            
            const isAuthorBe = be.includes(author);
            const isAuthorAn = an.includes(author);
            
            const reviewers = (isAuthorAn ? an : isAuthorBe ? be : []).filter(r => r !== author);
            
            if (reviewers.length) {
              await github.rest.pulls.requestReviewers({
                owner: repository.owner.login,
                repo: repository.name,
                pull_number: pr.number,
                reviewers,
              });
            }

      - name: Set Team labels
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { pull_request: pr, repository } = context.payload;
            const branch = pr.head.ref;
            
            const branchLabel = {
              be: '⚙️ backend',
            an: '🤖 android',
            };
            
            const branchPrefix = Object.keys(branchLabel).find(prefix => branch.startsWith(prefix));
            
            const labels = [];
            if (branchPrefix) labels.push(branchLabel[branchPrefix]);
            
            if (labels.length) {
              await github.rest.issues.addLabels({
                owner: repository.owner.login,
                repo: repository.name,
                issue_number: pr.number,
                labels,
              });
            }

      - name: Set Project v2
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_V2_TOKEN }}
          script: |
            const { pull_request: pr } = context.payload;
            const projectNodeId = 'PVT_kwDOA_44FM4A9RVr';
            const addItemResponse = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              contentId: pr.node_id,
            });
            
            const itemId = addItemResponse.addProjectV2ItemById.item.id;
            
            const statusFieldId = 'PVTSSF_lADOA_44FM4A9RVrzgxBaSI';
            const inprogressOptionId = '47fc9ee4';
            
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId: projectNodeId,
              itemId,
              fieldId: statusFieldId,
              optionId: inprogressOptionId,
            });
